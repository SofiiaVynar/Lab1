package ua.lviv.iot.algo.part1.lab1;

import lombok.*;
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString
abstract class Aircraft {
    protected String manufacturer;
    protected int maxSpeed;

    public abstract void getMaxFlyingDistance();

    public abstract void getMaxDeliveryWeight();
}
package ua.lviv.iot.algo.part1.lab1;

import lombok.*;
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString(callSuper = true)
public class Helicopter extends Aircraft {
    private int id = 100;
    private String model;
    private int currentAltitude;
    private int maxAltitude;
    private int fuelCapacity;
    private int currentFuel;

    public Helicopter(String manufacturer, int maxSpeed, String model, int currentAltitude, int maxAltitude, int fuelCapacity, int currentFuel) {
        super (manufacturer, maxSpeed);
        this.model = model;
        this.currentAltitude = currentAltitude;
        this.maxAltitude = maxAltitude;
        this.fuelCapacity = fuelCapacity;
        this.currentFuel = currentFuel;
    }

    public void takeOff() {
        ascend(100);
    }

    public void ascend(int altitude) {
        if (currentAltitude + altitude > maxAltitude) {
            currentAltitude = maxAltitude;
        } else {
            currentAltitude += altitude;
        }
    }


    public void descend(int altitude) {
        if (currentAltitude - altitude < 0) {
            currentAltitude = 0;
        } else {
            currentAltitude -= altitude;
        }
    }

    public void refuel(int fuel) {
        if (currentFuel + fuel > fuelCapacity) {
            currentFuel = fuelCapacity;
        } else {
            currentFuel += fuel;
        }
    }

    @Override
    public void getMaxFlyingDistance() {
        double maxDistance = ((double)currentFuel/fuelCapacity)* maxSpeed;
    }

    @Override
    public void getMaxDeliveryWeight() {
    }
}
package ua.lviv.iot.algo.part1.lab1;

import lombok.*;
@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString(callSuper = true)
public class Drone extends Aircraft{
    private int batteryCapacity;
    private int energyConsumptionPerMinute;
    public Drone(String manufacturer, int maxSpeed, int batteryCapacity, int energyConsumptionPerMinute){
        super (manufacturer, maxSpeed);
        this.batteryCapacity = batteryCapacity;
        this.energyConsumptionPerMinute = energyConsumptionPerMinute;
    }
    @Override
    public void getMaxFlyingDistance() {
        double maxDistance = ((double)batteryCapacity/energyConsumptionPerMinute)* maxSpeed;
        System.out.println("Max flying distance:" + maxDistance+ "km");
    }
    @Override
    public void getMaxDeliveryWeight() {

    }
}
ackage ua.lviv.iot.algo.part1.lab1;

import lombok.ToString;
@ToString(callSuper = true)
public class Plane extends Aircraft {
    int wingsSpan;
    int weight;

    public Plane(String manufacturer, int maxSpeed, int wingsSpan, int weight) {
        super(manufacturer, maxSpeed);
        this.wingsSpan = wingsSpan;
        this.weight = weight;
    }
    @Override
    public void getMaxFlyingDistance() {
        double maxDistance = Math.pow(getMaxSpeed(), 2) / 20 * wingsSpan;
    }
    @Override
    public void getMaxDeliveryWeight() {
        double maxDeliveryWeight = 1.6 * weight;
    }
}
package ua.lviv.iot.algo.part1.lab1;

import lombok.ToString;
@ToString(callSuper = true)
public class Glider extends Aircraft{
    int accelerationSpeed;
    int wingChordLength;
    public Glider(String manufacturer, int maxSpeed, int accelerationSpeed, int wingChordLength) {
        super(manufacturer, maxSpeed);
        this.accelerationSpeed = accelerationSpeed;
        this.wingChordLength = wingChordLength;
    }

    @Override
    public void getMaxFlyingDistance() {
        double maxDistance = accelerationSpeed * wingChordLength*15;
    }

    @Override
    public void getMaxDeliveryWeight(){
    }
}
package ua.lviv.iot.algo.part1.lab1;

import java.util.LinkedList;
import java.util.List;
import java.util.stream.Collectors;
public class AircraftManager{
    private final List<Aircraft> aircraft = new LinkedList<>();
    public void addAircraft(Aircraft aircraft) {
        this.aircraft.add(aircraft);
    }
    public List<Aircraft> findByManufacturer(String manufacturer){
        return aircraft.stream()
                .filter(aircraft -> aircraft.getManufacturer().equals(manufacturer))
                .collect(Collectors.toList());
    }
    public List<Aircraft> findAllWithMoreMaxSpeedThan() {
        return aircraft.stream()
                .filter(aircraft -> aircraft.getMaxSpeed()>400)
                .collect(Collectors.toList());
    }

    public static void main(String[] args){

        AircraftManager aircraftManager = new AircraftManager();


        aircraftManager.addAircraft(new Helicopter("Fly-High", 500, "Tiny", 400, 700, 400, 300));
        aircraftManager.addAircraft(new Helicopter("Fly-High", 300, "Tin", 200, 500, 600, 400));
        aircraftManager.addAircraft(new Drone("Sin", 70, 2000, 10));
        aircraftManager.addAircraft(new Drone("Son", 60, 1500, 8));
        aircraftManager.addAircraft(new Plane("Vinnie", 600, 20, 10000));
        aircraftManager.addAircraft(new Plane("Vinna", 100, 10, 5000));
        aircraftManager.addAircraft(new Glider("PiN", 100, 150, 40));
        aircraftManager.addAircraft(new Glider("PiNi", 70, 100, 25));

        System.out.println("Aircraft:");
        aircraftManager.aircraft.forEach(System.out::println);

        System.out.println("\nSearched manufacturer:");
        aircraftManager.findByManufacturer("PiN").forEach(System.out::println);

        System.out.println("\nAircraft with needed max speed:");
        aircraftManager.findAllWithMoreMaxSpeedThan().forEach(System.out::println);
    }
}